{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "eCommerce API",
    "description": "This is a comprehensive RESTful API for an E-commerce platform built with Node.js and Express.\n\nIt provides endpoints for managing users, products, categories, brands, orders, reviews, addresses, carts, wishlists, discounts, and secure Stripe-based payment processing.\n\n### üîê Authentication\nAll protected routes require a Bearer Token in the `Authorization` header.\n\n**Example:**\n```http\nAuthorization: Bearer your.jwt.token\n```\n\n### üì¶ Features\n- **User Management:** Registration, login, and admin access control\n- **Product Catalog:** CRUD operations for products, brands, and categories\n- **Order Management:** Order placement via Stripe webhook and order tracking\n- **Cart & Wishlist:** Add, update, or remove items\n- **Discounts:** Seller/admin-created coupon support\n- **Reviews & Ratings:** Submit and view product reviews\n- **Address Book:** User-specific shipping address management\n\n### üö® Error Handling\nResponses follow a consistent structure including:\n- `status`: success | error | failed\n- `message`: text or array of validation errors\n- `code`: HTTP status code\n- `data`: optional data or null\n\n### üìò Status Codes\n- `200` OK\n- `201` Created\n- `400` Bad Request (Validation errors)\n- `401` Unauthorized\n- `403` Forbidden\n- `404` Not Found\n- `500` Internal Server Error"
  },
  "tags": [
    {
      "name": "Users",
      "description": "Operations related to user management"
    },
    {
      "name": "Products",
      "description": "Operations related to product management"
    },
    {
      "name": "Addresses",
      "description": "Operations related to addresses management"
    },
    {
      "name": "Brands",
      "description": "Operations related to brands management"
    },
    {
      "name": "Categories",
      "description": "Operations related to categories management"
    },
    {
      "name": "Reviews",
      "description": "Operations related to reviews management"
    },
    {
      "name": "Orders",
      "description": "Operations related to customer orders"
    },
    {
      "name": "Stripe",
      "description": "Payment session and webhook handling"
    },
    {
      "name": "Cart",
      "description": "Operations related to shopping cart items"
    },
    {
      "name": "Wishlist",
      "description": "Operations related to user's wishlist"
    },
    {
      "name": "Discounts",
      "description": "Operations related to discounts and coupons"
    }
  ],
  "host": "localhost:5000",
  "basePath": "/api",
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/users": {
      "get": {
        "summary": "Get all users",
        "description": "Accessible to admin users only",
        "security": [{ "BearerAuth": [] }],
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "A list of users",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/User" }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },

    "/users/{userId}": {
      "get": {
        "summary": "Get a user by ID",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "schema": { "$ref": "#/definitions/User" }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },

    "/users/register": {
      "post": {
        "summary": "Register a new user",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "required": true,
            "schema": { "$ref": "#/definitions/UserRegister" }
          }
        ],
        "responses": {
          "201": {
            "description": "User created"
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },

    "/users/login": {
      "post": {
        "summary": "Login user",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "required": true,
            "schema": { "$ref": "#/definitions/UserLogin" }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful, token returned"
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },

    "/products": {
      "get": {
        "summary": "Get all products",
        "tags": ["Products"],
        "responses": {
          "200": {
            "description": "List of all products",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Product" }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      },
      "post": {
        "summary": "Create a new product",
        "consumes": ["multipart/form-data"],
        "security": [{ "BearerAuth": [] }],
        "tags": ["Products"],
        "parameters": [
          {
            "in": "formData",
            "name": "image",
            "type": "file",
            "required": true,
            "description": "Product image"
          },
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "price",
            "type": "number",
            "required": true
          },
          {
            "in": "formData",
            "name": "description",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Product created successfully",
            "schema": { "$ref": "#/definitions/Product" }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/ValidationErrorResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    },

    "/products/{productId}": {
      "get": {
        "summary": "Get a product by ID",
        "tags": ["Products"],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product found",
            "schema": { "$ref": "#/definitions/Product" }
          },
          "404": {
            "description": "Product not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      },
      "patch": {
        "summary": "Update a product",
        "consumes": ["multipart/form-data"],
        "security": [{ "BearerAuth": [] }],
        "tags": ["Products"],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "image",
            "type": "file",
            "required": false
          },
          {
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "price",
            "type": "number"
          },
          {
            "in": "formData",
            "name": "description",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "schema": { "$ref": "#/definitions/Product" }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/ValidationErrorResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Product not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      },
      "delete": {
        "summary": "Delete a product",
        "security": [{ "BearerAuth": [] }],
        "tags": ["Products"],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Product not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    },

    "/addresses/{userId}": {
      "get": {
        "summary": "Get addresses of a specific user",
        "tags": ["Addresses"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the user to get addresses for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of user addresses",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Address" }
            }
          },
          "404": {
            "description": "User or addresses not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    },

    "/addresses": {
      "post": {
        "summary": "Create a new address",
        "tags": ["Addresses"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "address",
            "required": true,
            "schema": { "$ref": "#/definitions/AddressInput" }
          }
        ],
        "responses": {
          "201": {
            "description": "Address created",
            "schema": { "$ref": "#/definitions/Address" }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/ValidationErrorResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    },

    "/brands": {
      "get": {
        "summary": "Get all brands",
        "tags": ["Brands"],
        "responses": {
          "200": {
            "description": "List of all brands",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Brand" }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      },
      "post": {
        "summary": "Create a new brand",
        "tags": ["Brands"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "brand",
            "required": true,
            "schema": { "$ref": "#/definitions/BrandInput" }
          }
        ],
        "responses": {
          "201": {
            "description": "Brand created",
            "schema": { "$ref": "#/definitions/Brand" }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/ValidationErrorResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    },

    "/brands/{brandId}": {
      "get": {
        "summary": "Get a brand by ID",
        "tags": ["Brands"],
        "parameters": [
          {
            "in": "path",
            "name": "brandId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Brand found",
            "schema": { "$ref": "#/definitions/Brand" }
          },
          "404": {
            "description": "Brand not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      },
      "patch": {
        "summary": "Update a brand",
        "tags": ["Brands"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "brandId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "brand",
            "required": true,
            "schema": { "$ref": "#/definitions/BrandInput" }
          }
        ],
        "responses": {
          "200": {
            "description": "Brand updated",
            "schema": { "$ref": "#/definitions/Brand" }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/ValidationErrorResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Brand not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      },
      "delete": {
        "summary": "Delete a brand",
        "tags": ["Brands"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "brandId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Brand deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Brand not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    },

    "/categories": {
      "get": {
        "summary": "Get all categories",
        "tags": ["Categories"],
        "responses": {
          "200": {
            "description": "List of all categories",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Category" }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      },
      "post": {
        "summary": "Create a new category",
        "tags": ["Categories"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "category",
            "required": true,
            "schema": { "$ref": "#/definitions/CategoryInput" }
          }
        ],
        "responses": {
          "201": {
            "description": "Category created",
            "schema": { "$ref": "#/definitions/Category" }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/ValidationErrorResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    },

    "/categories/{categoryId}": {
      "get": {
        "summary": "Get a category by ID",
        "tags": ["Categories"],
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Category found",
            "schema": { "$ref": "#/definitions/Category" }
          },
          "404": {
            "description": "Category not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      },
      "patch": {
        "summary": "Update a category",
        "tags": ["Categories"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "category",
            "required": true,
            "schema": { "$ref": "#/definitions/CategoryInput" }
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated",
            "schema": { "$ref": "#/definitions/Category" }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/ValidationErrorResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Category not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      },
      "delete": {
        "summary": "Delete a category",
        "tags": ["Categories"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Category not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    },

    "/reviews/{productId}": {
      "get": {
        "summary": "Get all reviews for a product",
        "tags": ["Reviews"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the product"
          }
        ],
        "responses": {
          "200": {
            "description": "List of product reviews",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Review" }
            }
          },
          "404": {
            "description": "Product or reviews not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    },

    "/reviews": {
      "post": {
        "summary": "Create a new review for a product",
        "tags": ["Reviews"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "review",
            "required": true,
            "schema": { "$ref": "#/definitions/ReviewInput" }
          }
        ],
        "responses": {
          "201": {
            "description": "Review created successfully",
            "schema": { "$ref": "#/definitions/Review" }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/ValidationErrorResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    },

    "/orders": {
      "get": {
        "summary": "Get all orders",
        "tags": ["Orders"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of orders",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Order" }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    },

    "/orders/{orderId}": {
      "get": {
        "summary": "Get an order by ID",
        "tags": ["Orders"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Order found",
            "schema": { "$ref": "#/definitions/OrderWithItems" }
          },
          "404": {
            "description": "Order not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },

    "/stripe/create-checkout-session": {
      "post": {
        "summary": "Create Stripe Checkout session to start an order",
        "tags": ["Stripe"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "checkoutData",
            "required": true,
            "schema": { "$ref": "#/definitions/CheckoutSessionInput" }
          }
        ],
        "responses": {
          "200": {
            "description": "Checkout session created",
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "example": "https://checkout.stripe.com/pay/cs_test_..."
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/ValidationErrorResponse" }
          }
        }
      }
    },

    "/cart": {
      "get": {
        "summary": "Get all items in the user's cart",
        "tags": ["Cart"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Cart items retrieved successfully",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/CartItemWithProduct" }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      },
      "post": {
        "summary": "Add a new item to the user's cart",
        "tags": ["Cart"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "cartItem",
            "required": true,
            "schema": { "$ref": "#/definitions/CartItemInput" }
          }
        ],
        "responses": {
          "201": {
            "description": "Cart item added",
            "schema": { "$ref": "#/definitions/CartItem" }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/ValidationErrorResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },

    "/cart/{cartItemId}": {
      "patch": {
        "summary": "Update quantity of a cart item",
        "tags": ["Cart"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "cartItemId",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "cartItem",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "quantity": { "type": "integer", "example": 2 }
              },
              "required": ["quantity"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cart item updated",
            "schema": { "$ref": "#/definitions/CartItem" }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/ValidationErrorResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Cart item not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          }
        }
      },
      "delete": {
        "summary": "Remove a cart item",
        "tags": ["Cart"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "cartItemId",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Cart item removed successfully"
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Cart item not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          }
        }
      }
    },

    "/wishlist/{userId}": {
      "get": {
        "summary": "Get all wishlist items for a user",
        "tags": ["Wishlist"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "type": "integer",
            "required": true,
            "description": "ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Wishlist retrieved successfully",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/WishlistItemWithProduct" }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Wishlist not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      },
      "post": {
        "summary": "Toggle wishlist item (add or remove)",
        "tags": ["Wishlist"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "type": "integer",
            "required": true,
            "description": "ID of the user"
          },
          {
            "in": "body",
            "name": "wishlistItem",
            "required": true,
            "schema": { "$ref": "#/definitions/WishlistItemInput" }
          }
        ],
        "responses": {
          "200": {
            "description": "Item added or removed from wishlist",
            "schema": { "$ref": "#/definitions/WishlistItem" }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/ValidationErrorResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    },

    "/discounts": {
      "get": {
        "summary": "Get all discounts",
        "tags": ["Discounts"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of all discounts",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Discount" }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      },
      "post": {
        "summary": "Create a new discount",
        "tags": ["Discounts"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "discount",
            "required": true,
            "schema": { "$ref": "#/definitions/DiscountInput" }
          }
        ],
        "responses": {
          "201": {
            "description": "Discount created",
            "schema": { "$ref": "#/definitions/Discount" }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/ValidationErrorResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    },

    "/discounts/{discountId}": {
      "get": {
        "summary": "Get a specific discount by ID",
        "tags": ["Discounts"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "discountId",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Discount retrieved",
            "schema": { "$ref": "#/definitions/Discount" }
          },
          "404": {
            "description": "Discount not found",
            "schema": { "$ref": "#/definitions/NotFoundResponse" }
          },
          "401": {
            "description": "Unauthorized",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/InternalServerErrorResponse" }
          }
        }
      }
    }
  },

  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "user_id": { "type": "integer" },
        "first_name": { "type": "string", "maxLength": 20 },
        "last_name": { "type": "string", "maxLength": 20 },
        "email": { "type": "string", "format": "email" },
        "phone": { "type": "string", "maxLength": 20 },
        "created_at": { "type": "string", "format": "date-time" },
        "role_id": { "type": "integer" }
      }
    },

    "UserRegister": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "email",
        "password",
        "phone",
        "role_id"
      ],
      "properties": {
        "first_name": { "type": "string", "maxLength": 20 },
        "last_name": { "type": "string", "maxLength": 20 },
        "email": { "type": "string", "format": "email" },
        "password": { "type": "string", "format": "password" },
        "phone": { "type": "string", "maxLength": 20 },
        "role_id": { "type": "integer" }
      }
    },

    "UserLogin": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": { "type": "string", "format": "email" },
        "password": { "type": "string", "format": "password" }
      }
    },

    "ErrorResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "example": "error"
        },
        "message": {
          "type": "string",
          "example": "Invalid JWT token."
        },
        "code": {
          "type": "integer",
          "example": 401
        },
        "data": {
          "type": ["object", "null"],
          "example": null
        }
      }
    },

    "NotFoundResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "example": "error"
        },
        "message": {
          "type": "string",
          "example": "Resource not found"
        },
        "code": {
          "type": "integer",
          "example": 404
        },
        "data": {
          "type": ["object", "null"],
          "example": null
        }
      }
    },

    "ValidationErrorResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "example": "failed",
          "description": "General status indicator for validation failures"
        },
        "message": {
          "type": "array",
          "description": "List of validation error details",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "field",
                "description": "The type of validation error (e.g., 'field', 'global')"
              },
              "msg": {
                "type": "string",
                "example": "This field is required.",
                "description": "The validation message"
              },
              "path": {
                "type": "string",
                "example": "email",
                "description": "The field or path that caused the error"
              },
              "location": {
                "type": "string",
                "example": "body",
                "description": "Where the validation failed (e.g., 'body', 'query', 'params')"
              },
              "value": {
                "type": ["string", "number", "boolean", "null"],
                "example": "not-an-email",
                "description": "The invalid value that was received"
              }
            },
            "required": ["msg"]
          }
        },
        "code": {
          "type": "integer",
          "example": 400,
          "description": "HTTP status code for the error"
        },
        "data": {
          "type": ["object", "null"],
          "example": null,
          "description": "Usually null in validation responses"
        }
      },
      "required": ["status", "message", "code"]
    },

    "InternalServerErrorResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "example": "error"
        },
        "message": {
          "type": "string",
          "example": "An unexpected error occurred on the server."
        },
        "code": {
          "type": "integer",
          "example": 500
        },
        "data": {
          "type": ["object", "null"],
          "example": null
        }
      }
    },

    "Product": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "integer",
          "format": "int32",
          "example": 1
        },
        "product_name": {
          "type": "string",
          "maxLength": 50,
          "example": "iPhone 14"
        },
        "product_description": {
          "type": "string",
          "example": "Latest model of iPhone with advanced features"
        },
        "price": {
          "type": "number",
          "format": "double",
          "example": 999.99
        },
        "stock_quantity": {
          "type": "integer",
          "format": "int32",
          "example": 15
        },
        "seller_id": {
          "type": "integer",
          "example": 3,
          "description": "ID of the user who owns this product"
        },
        "category_id": {
          "type": "integer",
          "example": 2
        },
        "brand_id": {
          "type": "integer",
          "example": 1
        },
        "product_image": {
          "type": "integer",
          "example": 101,
          "description": "ID from images table"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2024-01-01T12:00:00Z"
        }
      },
      "required": [
        "product_name",
        "product_description",
        "price",
        "stock_quantity",
        "seller_id",
        "category_id",
        "brand_id",
        "product_image"
      ]
    },

    "Address": {
      "type": "object",
      "properties": {
        "address_id": {
          "type": "integer",
          "example": 1
        },
        "user_id": {
          "type": "integer",
          "example": 5
        },
        "address_line_1": {
          "type": "string",
          "maxLength": 100,
          "example": "123 Main St"
        },
        "address_line_2": {
          "type": "string",
          "maxLength": 100,
          "example": "Apartment 4B"
        },
        "country": {
          "type": "string",
          "maxLength": 30,
          "example": "USA"
        },
        "state": {
          "type": "string",
          "maxLength": 30,
          "example": "California"
        },
        "city": {
          "type": "string",
          "maxLength": 30,
          "example": "Los Angeles"
        },
        "is_default": {
          "type": "boolean",
          "example": true
        }
      },
      "required": ["user_id", "address_line_1", "country", "state", "city"]
    },

    "AddressInput": {
      "type": "object",
      "properties": {
        "address_line_1": {
          "type": "string",
          "example": "123 Main St"
        },
        "address_line_2": {
          "type": "string",
          "example": "Apartment 4B"
        },
        "country": {
          "type": "string",
          "example": "USA"
        },
        "state": {
          "type": "string",
          "example": "California"
        },
        "city": {
          "type": "string",
          "example": "Los Angeles"
        },
        "is_default": {
          "type": "boolean",
          "example": true
        }
      },
      "required": ["address_line_1", "country", "state", "city"]
    },

    "Brand": {
      "type": "object",
      "properties": {
        "brand_id": {
          "type": "integer",
          "example": 1
        },
        "brand_name": {
          "type": "string",
          "maxLength": 50,
          "example": "Apple"
        }
      },
      "required": ["brand_id", "brand_name"]
    },

    "BrandInput": {
      "type": "object",
      "properties": {
        "brand_name": {
          "type": "string",
          "example": "Samsung"
        }
      },
      "required": ["brand_name"]
    },

    "Category": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "integer",
          "example": 1
        },
        "category_name": {
          "type": "string",
          "maxLength": 50,
          "example": "Electronics"
        }
      },
      "required": ["category_id", "category_name"]
    },

    "CategoryInput": {
      "type": "object",
      "properties": {
        "category_name": {
          "type": "string",
          "example": "Clothing"
        }
      },
      "required": ["category_name"]
    },

    "Review": {
      "type": "object",
      "properties": {
        "review_id": {
          "type": "integer",
          "example": 12
        },
        "user_id": {
          "type": "integer",
          "example": 5
        },
        "product_id": {
          "type": "integer",
          "example": 3
        },
        "rating": {
          "type": "integer",
          "minimum": 1,
          "maximum": 5,
          "example": 4
        },
        "review_text": {
          "type": "string",
          "example": "Great product, very satisfied!"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2024-06-01T12:00:00Z"
        }
      },
      "required": [
        "review_id",
        "user_id",
        "product_id",
        "rating",
        "review_text",
        "created_at"
      ]
    },

    "ReviewInput": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "integer",
          "example": 3
        },
        "rating": {
          "type": "integer",
          "minimum": 1,
          "maximum": 5,
          "example": 5
        },
        "review_text": {
          "type": "string",
          "example": "Amazing quality and fast shipping."
        }
      },
      "required": ["product_id", "rating", "review_text"]
    },

    "Order": {
      "type": "object",
      "properties": {
        "order_id": { "type": "integer", "example": 1001 },
        "user_id": { "type": "integer", "example": 3 },
        "status": {
          "type": "string",
          "enum": ["Pending", "Shipped", "Delivered", "Canceled", "Processing"],
          "example": "Pending"
        },
        "total_price": {
          "type": "number",
          "format": "double",
          "example": 249.99
        },
        "discount_id": { "type": "integer", "example": 2 },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2024-06-01T14:00:00Z"
        }
      },
      "required": ["user_id", "status", "total_price"]
    },

    "OrderItem": {
      "type": "object",
      "properties": {
        "order_item_id": { "type": "integer", "example": 1 },
        "order_id": { "type": "integer", "example": 1001 },
        "product_id": { "type": "integer", "example": 12 },
        "quantity": { "type": "integer", "example": 2 }
      },
      "required": ["order_id", "product_id", "quantity"]
    },

    "OrderWithItems": {
      "allOf": [
        { "$ref": "#/definitions/Order" },
        {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": { "$ref": "#/definitions/OrderItem" }
            }
          }
        }
      ]
    },

    "CheckoutSessionInput": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "product_id": { "type": "integer", "example": 5 },
              "quantity": { "type": "integer", "example": 1 }
            },
            "required": ["product_id", "quantity"]
          }
        },
        "discount_id": {
          "type": "integer",
          "example": 2
        }
      },
      "required": ["items"]
    },

    "CartItem": {
      "type": "object",
      "properties": {
        "cart_items_id": { "type": "integer", "example": 1 },
        "cart_id": { "type": "integer", "example": 10 },
        "product_id": { "type": "integer", "example": 5 },
        "quantity": { "type": "integer", "example": 3 }
      },
      "required": ["cart_id", "product_id", "quantity"]
    },

    "CartItemInput": {
      "type": "object",
      "properties": {
        "product_id": { "type": "integer", "example": 5 },
        "quantity": { "type": "integer", "example": 1 }
      },
      "required": ["product_id", "quantity"]
    },

    "CartItemWithProduct": {
      "allOf": [
        { "$ref": "#/definitions/CartItem" },
        {
          "type": "object",
          "properties": {
            "product": {
              "$ref": "#/definitions/Product"
            }
          }
        }
      ]
    },

    "WishlistItem": {
      "type": "object",
      "properties": {
        "wishlist_id": { "type": "integer", "example": 15 },
        "user_id": { "type": "integer", "example": 3 },
        "product_id": { "type": "integer", "example": 10 }
      },
      "required": ["user_id", "product_id"]
    },

    "WishlistItemInput": {
      "type": "object",
      "properties": {
        "product_id": { "type": "integer", "example": 10 }
      },
      "required": ["product_id"]
    },

    "WishlistItemWithProduct": {
      "allOf": [
        { "$ref": "#/definitions/WishlistItem" },
        {
          "type": "object",
          "properties": {
            "product": { "$ref": "#/definitions/Product" }
          }
        }
      ]
    },

    "Discount": {
      "type": "object",
      "properties": {
        "discount_id": { "type": "integer", "example": 1 },
        "seller_id": { "type": "integer", "example": 7 },
        "code": { "type": "string", "example": "SUMMER25" },
        "discount_percentage": {
          "type": "number",
          "format": "float",
          "example": 25.0
        },
        "valid_from": {
          "type": "string",
          "format": "date-time",
          "example": "2025-06-15T00:00:00Z"
        },
        "valid_to": {
          "type": "string",
          "format": "date-time",
          "example": "2025-07-15T23:59:59Z"
        }
      },
      "required": [
        "discount_id",
        "seller_id",
        "code",
        "discount_percentage",
        "valid_from",
        "valid_to"
      ]
    },

    "DiscountInput": {
      "type": "object",
      "properties": {
        "code": { "type": "string", "example": "WELCOME10" },
        "discount_percentage": {
          "type": "number",
          "format": "float",
          "example": 10.0
        },
        "valid_from": {
          "type": "string",
          "format": "date-time",
          "example": "2025-06-01T00:00:00Z"
        },
        "valid_to": {
          "type": "string",
          "format": "date-time",
          "example": "2025-06-30T23:59:59Z"
        }
      },
      "required": ["code", "discount_percentage", "valid_from", "valid_to"]
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter your bearer token in the format **Bearer &lt;token&gt;**"
    }
  }
}
